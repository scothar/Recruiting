[{"/Users/lsachs/Code/Owlpalooza/Recruiting/src/index.js":"1","/Users/lsachs/Code/Owlpalooza/Recruiting/src/App.js":"2","/Users/lsachs/Code/Owlpalooza/Recruiting/src/serviceWorker.js":"3","/Users/lsachs/Code/Owlpalooza/Recruiting/src/ConversationsApp.js":"4","/Users/lsachs/Code/Owlpalooza/Recruiting/src/assets/ProjectData.js":"5","/Users/lsachs/Code/Owlpalooza/Recruiting/src/utils/TwilioUtils.js":"6","/Users/lsachs/Code/Owlpalooza/Recruiting/src/Recruits.js":"7","/Users/lsachs/Code/Owlpalooza/Recruiting/src/HeaderItem.js":"8","/Users/lsachs/Code/Owlpalooza/Recruiting/src/Conversation.js":"9","/Users/lsachs/Code/Owlpalooza/Recruiting/src/ConversationsList.js":"10","/Users/lsachs/Code/Owlpalooza/Recruiting/src/LoginPage.jsx":"11","/Users/lsachs/Code/Owlpalooza/Recruiting/src/config.js":"12","/Users/lsachs/Code/Owlpalooza/Recruiting/src/MessageBubble.js":"13","/Users/lsachs/Code/Owlpalooza/Recruiting/src/ConversationsMessages.js":"14","/Users/lsachs/Code/Owlpalooza/Recruiting/src/utils/class-name.js":"15","/Users/lsachs/Code/Owlpalooza/Recruiting/src/WhatsappIcon.js":"16","/Users/lsachs/Code/Owlpalooza/Recruiting/src/ChatIcon.js":"17"},{"size":458,"mtime":1635272253381,"results":"18","hashOfConfig":"19"},{"size":319,"mtime":1635272253370,"results":"20","hashOfConfig":"19"},{"size":4812,"mtime":1635272253381,"results":"21","hashOfConfig":"19"},{"size":7335,"mtime":1635272253372,"results":"22","hashOfConfig":"19"},{"size":769,"mtime":1635287087263,"results":"23","hashOfConfig":"19"},{"size":1213,"mtime":1635272253382,"results":"24","hashOfConfig":"19"},{"size":1989,"mtime":1635272253374,"results":"25","hashOfConfig":"19"},{"size":237,"mtime":1635272253373,"results":"26","hashOfConfig":"19"},{"size":7316,"mtime":1635272253371,"results":"27","hashOfConfig":"19"},{"size":1811,"mtime":1635272253372,"results":"28","hashOfConfig":"19"},{"size":2390,"mtime":1635272253373,"results":"29","hashOfConfig":"19"},{"size":575,"mtime":1635272253380,"results":"30","hashOfConfig":"19"},{"size":4106,"mtime":1635272253374,"results":"31","hashOfConfig":"19"},{"size":798,"mtime":1635272253373,"results":"32","hashOfConfig":"19"},{"size":96,"mtime":1635272253382,"results":"33","hashOfConfig":"19"},{"size":1465,"mtime":1635272253375,"results":"34","hashOfConfig":"19"},{"size":2400,"mtime":1635272253371,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1p2yile",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"/Users/lsachs/Code/Owlpalooza/Recruiting/src/index.js",[],["77","78"],"/Users/lsachs/Code/Owlpalooza/Recruiting/src/App.js",[],"/Users/lsachs/Code/Owlpalooza/Recruiting/src/serviceWorker.js",[],"/Users/lsachs/Code/Owlpalooza/Recruiting/src/ConversationsApp.js",["79"],"import React from \"react\";\nimport { Badge, Icon, Layout, Spin, Typography } from \"antd\";\nimport { Client as ConversationsClient } from \"@twilio/conversations\";\n\nimport \"./assets/Conversation.css\";\nimport \"./assets/ConversationSection.css\";\nimport { ReactComponent as Logo } from \"./assets/twilio-mark-red.svg\";\n\nimport Conversation from \"./Conversation\";\nimport Recruits from \"./Recruits\";\n\nimport LoginPage from \"./LoginPage\";\nimport { ConversationsList } from \"./ConversationsList\";\nimport { HeaderItem } from \"./HeaderItem\";\n\nimport { createToken } from \"./utils/TwilioUtils.js\";\n\nimport { customerData, recruiters, serverUrl } from \"./assets/ProjectData.js\";\n\nconst { Content, Sider, Header } = Layout;\nconst { Text } = Typography;\n\nclass ConversationsApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const name = localStorage.getItem(\"name\") || \"\";\n    const loggedIn = name !== \"\";\n\n    this.state = {\n      name,\n      loggedIn,\n      token: null,\n      statusString: null,\n      conversationsReady: false,\n      conversations: [],\n      selectedConversationSid: null,\n      newMessage: \"\",\n      candidateData: customerData,\n      recruiterData: recruiters,\n      url: serverUrl\n    };\n\n    console.log(\"DATA==============\", this.state.candidateData);\n\n  }\n\n  componentDidMount = () => {\n    if (this.state.loggedIn) {\n      this.getToken();\n      this.setState({ statusString: \"Fetching credentials…\"});\n      \n    }\n\n\n  };\n\n  logIn = (name) => {\n    if (name !== \"\") {\n      localStorage.setItem(\"name\", name);\n      this.setState({ name, loggedIn: true }, this.getToken);\n      \n    }\n  };\n\n  logOut = (event) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    this.setState({\n      name: \"\",\n      loggedIn: false,\n      token: \"\",\n      conversationsReady: false,\n      messages: [],\n      newMessage: \"\",\n      conversations: []\n    });\n\n    localStorage.removeItem(\"name\");\n    this.conversationsClient.shutdown();\n  };\n\n  getToken = () => {\n\n    console.log(`Creating a Token for ${this.state.name}`);\n    const myToken = createToken(this.state.name);\n\n    this.setState({ token: myToken }, this.initConversations);\n  };\n\n  initConversations = async () => {\n    window.conversationsClient = ConversationsClient;\n    this.conversationsClient = await ConversationsClient.create(\n      this.state.token\n    );\n\n    this.setState({ statusString: \"Connecting to Twilio…\" });\n\n    this.conversationsClient.on(\"connectionStateChanged\", (state) => {\n      if (state === \"connecting\")\n        this.setState({\n          statusString: \"Connecting to Twilio…\",\n          status: \"default\"\n        });\n      if (state === \"connected\") {\n        this.setState({\n          statusString: \"You are connected.\",\n          status: \"success\"\n        });\n      }\n      if (state === \"disconnecting\")\n        this.setState({\n          statusString: \"Disconnecting from Twilio…\",\n          conversationsReady: false,\n          status: \"default\"\n        });\n      if (state === \"disconnected\")\n        this.setState({\n          statusString: \"Disconnected.\",\n          conversationsReady: false,\n          status: \"warning\"\n        });\n      if (state === \"denied\")\n        this.setState({\n          statusString: \"Failed to connect.\",\n          conversationsReady: false,\n          status: \"error\"\n        });\n    });\n    this.conversationsClient.on(\"conversationJoined\", (conversation) => {\n      this.setState({\n        conversations: [...this.state.conversations, conversation]\n      });\n    });\n    this.conversationsClient.on(\"conversationLeft\", (thisConversation) => {\n      this.setState({\n        conversations: [\n          ...this.state.conversations.filter((it) => it !== thisConversation)\n        ]\n      });\n    });\n  };\n\n  render() {\n    const { conversations, selectedConversationSid, status } = this.state;\n    const selectedConversation = conversations.find(\n      (it) => it.sid === selectedConversationSid\n    );\n\n    let conversationContent;\n    if (selectedConversation) {\n      conversationContent = (\n        <Conversation\n          conversationProxy={selectedConversation}\n          myIdentity={this.state.name}\n          data={this.state.recruiterData}\n          url={this.state.url}\n        />\n      );\n    } else if (status !== \"success\") {\n      conversationContent = \"Loading your conversation!\";\n    } else {\n      conversationContent = \"\";\n    }\n\n    if (this.state.loggedIn) {\n      return (\n        <div className=\"conversations-window-wrapper\">\n          <Layout className=\"conversations-window-container\">\n            <Header\n              style={{ display: \"flex\", alignItems: \"center\", padding: 0 }}\n            >\n              <div\n                style={{\n                  maxWidth: \"250px\",\n                  width: \"100%\",\n                  display: \"flex\",\n                  alignItems: \"center\"\n                }}\n              >\n                <HeaderItem style={{ paddingRight: \"0\", display: \"flex\" }}>\n                  <Logo />\n                </HeaderItem>\n                <HeaderItem>\n                  <Text strong style={{ color: \"white\" }}>\n                    Facebook Recruiting\n                  </Text>\n                </HeaderItem>\n              </div>\n              <div style={{ display: \"flex\", width: \"100%\" }}>\n                <HeaderItem>\n                  <Text strong style={{ color: \"white\" }}>\n                    {selectedConversation &&\n                      (selectedConversation.friendlyName ||\n                        selectedConversation.sid)}\n                  </Text>\n                </HeaderItem>\n                <HeaderItem style={{ float: \"right\", marginLeft: \"auto\" }}>\n                  <span\n                    style={{ color: \"white\" }}\n                  >{` ${this.state.statusString}`}</span>\n                  <Badge\n                    dot={true}\n                    status={this.state.status}\n                    style={{ marginLeft: \"1em\" }}\n                  />\n                </HeaderItem>\n                <HeaderItem>\n                  <Icon\n                    type=\"poweroff\"\n                    onClick={this.logOut}\n                    style={{\n                      color: \"white\",\n                      fontSize: \"20px\",\n                      marginLeft: \"auto\"\n                    }}\n                  />\n                </HeaderItem>\n              </div>\n            </Header>\n            <Content className=\"customer-section\">\n              <Recruits identity={this.state.name} data={this.state.candidateData} />\n            </Content>\n            <Layout id=\"communication-section\">\n              <Sider theme={\"light\"} width={250}>\n                <ConversationsList \n                  conversations={conversations}\n                  selectedConversationSid={selectedConversationSid}\n                  onConversationClick={(item) => {\n                    this.setState({ selectedConversationSid: item.sid });\n                  }}\n                />\n              </Sider>\n              <Content className=\"conversation-section\">\n                <div id=\"SelectedConversation\">{conversationContent}</div>\n              </Content>\n            </Layout>\n          </Layout>\n        </div>\n      );\n    }\n\n    return <LoginPage onSubmit={this.logIn} />;\n  }\n}\n\nexport default ConversationsApp;\n","/Users/lsachs/Code/Owlpalooza/Recruiting/src/assets/ProjectData.js",["80"],"const customerData = [\n  { id: 4084, name: \"Scott\", phoneNumber: \"+14083142771\", recruiter: \"alice\" },\n  { id: 4093, name: \"Leslie\", phoneNumber: \"+16176052240\", recruiter: \"alice\" },\n  { id: 4099, name: \"Neha\",  phoneNumber: \"+19258886464\", recruiter: \"alice\" },\n  { id: 5010, name: \"Aimee\", phoneNumber: \"+16508629043\", recruiter: \"alice\" }\n \n\n];\n\nconst recruiters = [\n  {name: \"alice\", vcf: \"https://malachite-insect-1116.twil.io/assets/alice.vcf\", projectedAddress: \"+17812538123\" },\n  {name: \"bob\",   vcf: \"https://malachite-insect-1116.twil.io/assets/bob.vcf\",   projectedAddress: \"+18039023799\" }\n]\n\nconst serverUrl = \"http://localhost:3000\";\n\nconst getCustomers = () => {\n  return customerData;\n};\n\nmodule.exports = {\n  customerData,\n  recruiters,\n  serverUrl\n}","/Users/lsachs/Code/Owlpalooza/Recruiting/src/utils/TwilioUtils.js",[],"/Users/lsachs/Code/Owlpalooza/Recruiting/src/Recruits.js",["81","82"],"import React from \"react\";\nimport fetch from 'node-fetch';\n\nimport { customerData, serverUrl } from './assets/ProjectData';\n\nimport \"./assets/Customers.css\";\n\nclass Recruits extends React.Component {\n  constructor(props) {\n    super(props);\n    const { identity, data } = props;\n   \n    this.state = {\n      customerList: data,\n      identity: identity,\n      data: '',\n      customerData: customerData,\n      url: serverUrl\n\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    console.log(\"CUSTOMERS--------------------\", this.state.customerList);\n  }\n\n  handleClick = (e) => {\n    console.log(`Number to text: ${e}`);\n    \n    this.state.data = {\n      sms: e,\n      chat: this.state.identity, \n      conversationName: customerData.find( c => c.phoneNumber == e).name\n    }\n\n    \n    fetch(this.state.url + '/conversations/create/', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.state.data)\n    })\n    \n  };\n\n  renderTableData() {\n    return this.state.customerList.map((customer, index) => {\n      const { id, name, phoneNumber, recruiter } = customer; //destructuring\n      return (\n        <tr key={phoneNumber}>\n          <td>{id}</td>\n          <td>{name}</td>\n          <td>{phoneNumber}</td>\n          <td>{recruiter}</td>\n          <td>\n            <button onClick={ () => this.handleClick(phoneNumber) }>\n              Create Conversation\n            </button>\n          </td>\n        </tr>\n      );\n    });\n  }\n\n  renderTableHeader() {\n\n    let header = [\"Id\", \"Name\", \"Phone Number\", \"Recruiter\", \"Action\"];\n\n    return header.map((key, index) => {\n      return <th key={index}>{key.toUpperCase()}</th>;\n    });\n  }\n\n  render() {\n    return (\n      <div>        \n        <table id=\"customers\">\n          <tbody>\n            <tr>{this.renderTableHeader()}</tr>\n            {this.renderTableData()}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Recruits;\n","/Users/lsachs/Code/Owlpalooza/Recruiting/src/HeaderItem.js",[],"/Users/lsachs/Code/Owlpalooza/Recruiting/src/Conversation.js",["83","84","85"],"import React, { Component } from 'react';\nimport './assets/Conversation.css';\nimport MessageBubble from './MessageBubble'\nimport Dropzone from 'react-dropzone';\nimport styles from './assets/Conversation.module.css'\nimport {Button, Form, Icon, Input} from \"antd\";\nimport ConversationsMessages from \"./ConversationsMessages\";\nimport PropTypes from \"prop-types\";\nimport fetch from 'node-fetch';\n\nclass Conversation extends Component {\n  constructor(props) {\n    super(props);\n    const { myIdentity, data, url } = props;\n\n    this.state = {\n        newMessage: '',\n        conversationProxy: props.conversationProxy,\n        messages: [],\n        loadingState: 'initializing',\n        boundConversations: new Set(),\n        identity: myIdentity,\n        recruiterData: data,\n        url: url\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n\n  }\n\n  handleAdd = async (sid, user) => {\n    const res = await fetch(this.state.url + '/conversations/add/' + sid + '/' + user);\n  }\n  /*\n  * Send vcf Card\n  * see: https://www.twilio.com/docs/conversations/media-support-conversations\n  */\n  handleClick = async (e) => {\n    \n    let vcf = this.state.recruiterData.find( r => r.name == e).vcf\n    console.log(\"Sending vcf for \", vcf);\n    \n    const res = await fetch(vcf)\n    console.log(\"RESPONSE\", res);\n    \n    const buff = await res.buffer()\n    this.state.conversationProxy.sendMessage({contentType: \"text/vcard\", media: buff});\n  }\n\n  handleClose = async (sid) => {\n    await this.closeConversation(sid);\n\n  }\n\n  loadMessagesFor = (thisConversation) => {\n    if (this.state.conversationProxy === thisConversation) {\n        thisConversation.getMessages()\n            .then(messagePaginator => {\n                if (this.state.conversationProxy === thisConversation) {\n                    this.setState({ messages: messagePaginator.items, loadingState: 'ready' });\n                }\n            })\n            .catch(err => {\n                console.error(\"Couldn't fetch messages IMPLEMENT RETRY\", err);\n                this.setState({ loadingState: \"failed\" });\n            });\n    }\n  };\n\n  componentDidMount = () => {\n      if (this.state.conversationProxy) {\n        this.loadMessagesFor(this.state.conversationProxy);\n\n        if (!this.state.boundConversations.has(this.state.conversationProxy)) {\n            let newConversation = this.state.conversationProxy;\n            newConversation.on('messageAdded', m => this.messageAdded(m, newConversation));\n            this.setState({boundConversations: new Set([...this.state.boundConversations, newConversation])});\n        }\n      }\n  }\n\n  componentDidUpdate = (oldProps, oldState) => {\n    if (this.state.conversationProxy !== oldState.conversationProxy) {\n        this.loadMessagesFor(this.state.conversationProxy);\n\n        if (!this.state.boundConversations.has(this.state.conversationProxy)) {\n            let newConversation = this.state.conversationProxy;\n            newConversation.on('messageAdded', m => this.messageAdded(m, newConversation));\n            this.setState({boundConversations: new Set([...this.state.boundConversations, newConversation])});\n        }\n    }\n  };\n\n  static getDerivedStateFromProps(newProps, oldState) {\n    let logic = (oldState.loadingState === 'initializing') || oldState.conversationProxy !== newProps.conversationProxy;\n    if (logic) {\n      return { loadingState: 'loading messages', conversationProxy: newProps.conversationProxy };\n    } else {\n      return null;\n    }\n  }\n\n  messageAdded = (message, targetConversation) => {\n    if (targetConversation === this.state.conversationProxy)\n        this.setState((prevState, props) => ({\n            messages: [...prevState.messages, message]\n        }));\n  };\n\n  onMessageChanged = event => {\n    this.setState({ newMessage: event.target.value });\n  };\n  \n  closeConversation = async (sid) =>{\n    fetch(this.state.url + '/conversations/close/'+ sid);\n  }\n\n/*\n* Send Message to Conversation\n* see http://media.twiliocdn.com/sdk/js/conversations/releases/1.2.3/docs/Conversation.html#sendMessage__anchor\n*/\n  sendMessage = event => {\n    event.preventDefault();\n    const message = this.state.newMessage;\n    this.setState({ newMessage: '' });\n    this.state.conversationProxy.sendMessage(message);\n  };\n\n  onDrop = acceptedFiles => {\n    this.state.conversationProxy.sendMessage({contentType: acceptedFiles[0].type, media: acceptedFiles[0]});\n  };\n\n  render = () => {\n    return (\n        <Dropzone\n            onDrop={this.onDrop}\n            accept=\"image/*\">\n          {({getRootProps, getInputProps, isDragActive}) => (\n              <div\n                  {...getRootProps()}\n                  onClick={() => {\n                  }}\n                  id=\"OpenChannel\"\n                  style={{position: \"relative\", top: 0}}>\n\n                {isDragActive &&\n                <div className={styles.drop}>\n                  <Icon type={\"cloud-upload\"}\n                        style={{fontSize: \"5em\", color: \"#fefefe\"}}/>\n                  <h3 style={{color: \"#fefefe\"}}>Release to Upload</h3>\n                </div>\n                }\n                <div\n                    className={styles.messages}\n                    style={{\n                      filter: `blur(${isDragActive ? 4 : 0}px)`,\n                    }}\n                >\n                  <input id=\"files\" {...getInputProps()} />\n                  <div style={{flexBasis: \"100%\", flexGrow: 2, flexShrink: 1, overflowY: \"scroll\"}}>\n                    <ConversationsMessages\n                        identity={this.props.myIdentity}\n                        messages={this.state.messages}/>\n                  </div>\n                  <div>\n                    <Form onSubmit={this.sendMessage}>\n                      <Input.Group compact={true} style={{\n                        width: \"100%\",\n                        display: \"flex\",\n                        flexDirection: \"row\"\n                      }}>\n                        <Input\n                            style={{flexBasis: \"100%\"}}\n                            placeholder={\"Type your message here...\"}\n                            type={\"text\"}\n                            name={\"message\"}\n                            id={styles['type-a-message']}\n                            autoComplete={\"off\"}\n                            disabled={this.state.loadingState !== 'ready'}\n                            onChange={this.onMessageChanged}\n                            value={this.state.newMessage}\n                        />\n                        <Button icon=\"enter\" htmlType=\"submit\" type={\"submit\"}/>\n                        <Button icon=\"idcard\" onClick={ () => this.handleClick(this.state.identity) }/>\n                        <Button icon=\"plus\" onClick = { () => this.handleAdd(this.state.conversationProxy.sid, \"bob\")} />\n                        <Button icon=\"close\" onClick = { () => this.handleClose(this.state.conversationProxy.sid) } />\n                      </Input.Group>\n                    </Form>\n                  </div>\n                </div>\n              </div>\n          )}\n\n        </Dropzone>\n    );\n  }\n}\n\nConversation.propTypes = {\n  myIdentity: PropTypes.string.isRequired\n};\n\nexport default Conversation;","/Users/lsachs/Code/Owlpalooza/Recruiting/src/ConversationsList.js",[],"/Users/lsachs/Code/Owlpalooza/Recruiting/src/LoginPage.jsx",[],"/Users/lsachs/Code/Owlpalooza/Recruiting/src/config.js",[],"/Users/lsachs/Code/Owlpalooza/Recruiting/src/MessageBubble.js",["86"],"import React, { Component, PureComponent } from \"react\";\nimport styles from \"./assets/MessageBubble.module.css\";\nimport PropTypes from \"prop-types\";\nimport { Spin, Modal, Icon } from \"antd\";\nimport WhatsappIcon from \"./WhatsappIcon\";\nimport ChatIcon from \"./ChatIcon\";\n\nclass MessageBubble extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasMedia: this.props.message.type === \"media\",\n      mediaDownloadFailed: false,\n      mediaUrl: null\n    };\n  }\n\n  componentDidMount = async () => {\n    this.setState({\n      ...this.state,\n      type: (await this.props.message.getParticipant()).type\n    });\n    if (this.state.hasMedia) {\n      this.props.message.media\n        .getContentTemporaryUrl()\n        .then((url) => {\n          this.setState({ mediaUrl: url });\n        })\n        .catch((e) => this.setState({ mediaDownloadFailed: true }));\n    }\n    document\n      .getElementById(this.props.message.sid)\n      .scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    document\n      .getElementById(this.props.message.sid)\n      .scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  render = () => {\n    const { itemStyle, divStyle } =\n      this.props.direction === \"incoming\"\n        ? {\n            itemStyle: styles.received_msg,\n            divStyle: styles.received_withd_msg\n          }\n        : { itemStyle: styles.outgoing_msg, divStyle: styles.sent_msg };\n\n    const m = this.props.message;\n    const type = this.state.type;\n\n    if (this.state.hasMedia) {\n      console.log(\"Message is media message\");\n      // log media properties\n      console.log(\"Media properties\", m.media);\n    }\n    console.log(m);\n    return (\n      <li id={m.sid} className={itemStyle}>\n        <div className={divStyle}>\n          <div>\n            <strong>\n              {type === \"whatsapp\" && (\n                <Icon style={{ fontSize: \"16px\" }} component={WhatsappIcon} />\n              )}\n              {type === \"chat\" && (\n                <Icon style={{ fontSize: \"16px\" }} component={ChatIcon} />\n              )}\n              {type === \"sms\" && <Icon type={\"mobile\"} />}\n              {` ${m.author}`}\n            </strong>\n\n            <br />\n            <div className={styles.medias}>\n              {this.state.hasMedia && (\n                <Media\n                  hasFailed={this.state.mediaDownloadFailed}\n                  url={this.state.mediaUrl}\n                />\n              )}\n            </div>\n            {m.body}\n          </div>\n          <span className={styles.time_date}>\n            {m.state.timestamp.toLocaleString()}\n          </span>\n        </div>\n      </li>\n    );\n  };\n}\n\nclass Media extends PureComponent {\n  render = () => {\n    const { hasFailed, url } = this.props;\n    return (\n      <div\n        className={`${styles.media}${!url ? \" \" + styles.placeholder : \"\"}`}\n        onClick={() => {\n          Modal.info({\n            centered: true,\n            icon: null,\n            okText: \"Close\",\n            width: \"60%\",\n            content: (\n              <div className={styles.picture_container}>\n                <img style={{ width: \"100%\", height: \"100%\" }} src={url} />\n              </div>\n            )\n          });\n        }}\n      >\n        {!url && !hasFailed && <Spin />}\n\n        {hasFailed && (\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <Icon type={\"warning\"} style={{ fontSize: \"5em\" }} />\n            <p>Failed to load media</p>\n          </div>\n        )}\n\n        {!hasFailed && url && (\n          <div className={styles.media_icon}>\n            <div style={{ zIndex: 123, position: \"absolute\" }}>\n              <Icon type={\"eye\"} style={{ fontSize: \"5em\", opacity: 0.3 }} />\n            </div>\n            <div\n              className={styles.picture_preview}\n              style={{ backgroundImage: `url(${url})`, zIndex: 122 }}\n            ></div>\n          </div>\n        )}\n      </div>\n    );\n  };\n}\n\nMedia.propTypes = {\n  hasFailed: PropTypes.bool.isRequired,\n  url: PropTypes.string\n};\n\nexport default MessageBubble;\n","/Users/lsachs/Code/Owlpalooza/Recruiting/src/ConversationsMessages.js",[],"/Users/lsachs/Code/Owlpalooza/Recruiting/src/utils/class-name.js",[],"/Users/lsachs/Code/Owlpalooza/Recruiting/src/WhatsappIcon.js",[],"/Users/lsachs/Code/Owlpalooza/Recruiting/src/ChatIcon.js",[],["87","88"],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":2,"column":31,"nodeType":"95","messageId":"96","endLine":2,"endColumn":35},{"ruleId":"93","severity":1,"message":"97","line":17,"column":7,"nodeType":"95","messageId":"96","endLine":17,"endColumn":19},{"ruleId":"98","severity":1,"message":"99","line":29,"column":5,"nodeType":"100","endLine":29,"endColumn":15},{"ruleId":"101","severity":1,"message":"102","line":32,"column":63,"nodeType":"103","messageId":"104","endLine":32,"endColumn":65},{"ruleId":"93","severity":1,"message":"105","line":3,"column":8,"nodeType":"95","messageId":"96","endLine":3,"endColumn":21},{"ruleId":"93","severity":1,"message":"106","line":33,"column":11,"nodeType":"95","messageId":"96","endLine":33,"endColumn":14},{"ruleId":"101","severity":1,"message":"102","line":41,"column":58,"nodeType":"103","messageId":"104","endLine":41,"endColumn":60},{"ruleId":"107","severity":1,"message":"108","line":110,"column":17,"nodeType":"109","endLine":110,"endColumn":76},{"ruleId":"89","replacedBy":"110"},{"ruleId":"91","replacedBy":"111"},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'Spin' is defined but never used.","Identifier","unusedVar","'getCustomers' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'MessageBubble' is defined but never used.","'res' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["112"],["113"],"no-global-assign","no-unsafe-negation"]